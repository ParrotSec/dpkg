
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOME

dpkg-buildpackage - compila pacotes binários ou fonte a partir de fontes

=head1 SINOPSE

B<dpkg-buildpackage> [I<option>...]

=head1 DESCRIÇÃO

B<dpkg-buildpackage> é um programa que automatiza os processos de compilar
um pacote Debian. Consiste nos seguintes passos:

=over 

=item B<1.>

Prepara o ambiente de compilação ao definir várias variáveis de
ambiente. (veja B<ENVIRONMENT>), corre o hook B<init>, e chama B<dpkg-source
--before-build> (a menos que B<-T> ou B<--target> sejam usados).

=item B<2.>

Verifica se as dependências de compilação e os conflitos de compilação estão
satisfeitos (a menos que B<-d> ou B<--no-check-builddeps> seja
especificado).

=item B<3.>

Se um ou mais alvos específicos foram seleccionado com a opção B<-T> ou
B<--target>, chama esses alvos e pára aqui. Caso contrário corre o hook
B<preclean> e chama B<fakeroot debian/rules clean> para limpar a árvore de
compilação (a menos que B<-nc> ou B<--no-pre-clean> seja especificado).

=item B<4.>

Corre o hook B<source> e chama B<dpkg-source -b> para gerar o pacote
fonte. (se foi requerida uma compilação B<source> com B<--build> ou com
opções equivalentes).

=item B<5.>

Corre o hook B<build> e chama B<debian/rules> I<build-target>, depois corre
o hook B<binary> seguido de B<fakeroot debian/rules> I<binary-target> (a
menos que tenha sido requerido uma compilação apenas-fonte com
B<--build=source> ou opções equivalentes). Note que I<build-target> e
I<binary-target> são ou B<build> e B<binary> (caso predefinido, ou se uma
compilação B<any> e B<all> foi requerida com B<--build> ou opções
equivalentes), ou B<build-arch> e B<binary-arch> (se uma compilação B<any> e
não B<all> foi requerida com B<--build> ou opções equivalentes), ou
B<build-indep> e B<binary-indep> (se uma compilação B<all> e não B<any> foi
requerida com B<--build> ou opções equivalentes).

=item B<6.>

Corre o hook B<buildinfo>, e chama B<dpkg-genbuildinfo> para gerar um
ficheiro B<.buildinfo>. Várias opções de B<dpkg-buildpackage> são
reencaminhadas para o B<dpkg-genbuildinfo>.

=item B<7.>

Corre o hook B<changes> e chama B<dpkg-genchanges> para gerar um ficheiro
B<.changes>. O nome do ficheiro B<.changes> irá depender do tipo de
compilação e será tão específico quando necessário mas não mais; para uma
compilação que inclua B<any> o nome será
I<source-name>B<_>I<binary-version>B<_>I<arch>B<.changes>, ou caso contrário
para uma compilação que inclua B<all> o nome será
I<source-name>B<_>I<binary-version>B<_>B<all.changes>, ou caso contrário
para uma compilação que inclua B<source> o nome será
I<source-name>B<_>I<source-version>B<_>B<source.changes>.  Muitas opções de
B<dpkg-buildpackage> são reencaminhadas para B<dpkg-genchanges>.

=item B<8.>

Corre o hook B<postclean> e se B<-tc> ou B<--post-clean> for especificado,
irá chamar B<fakeroot debian/rules clean> outra vez.

=item B<9.>

Chama B<dpkg-source --after-build>.

=item B<10.>

Corre o hook B<check> e chama um verificados de pacote para o ficheiro
B<.changes> (se um comando for especificado em B<DEB_CHECK_COMMAND> ou com
B<--check-command>).

=item B<11.>

Corre o hook B<sign> e chama B<gpg> (desde que não seja uma compilação
NÃO-LANÇADA, ou se B<--no-sign> for especificado) para assinar o ficheiro
B<.dsc> (se algum, a menos que B<-us> ou B<--unsigned-source> sejam
especificados), o ficheiro B<.buildinfo> (a menos que B<-ui>,
B<--unsigned-buildinfo>, B<-uc> ou B<--unsigned-changes> sejam
especificados) e o ficheiros B<.changes> (a menos que B<-uc> ou
B<--unsigned-changes> sejam especificados).

=item B<12.>

Corre o hook B<done>.

=back

=head1 OPÇÕES

Todas as opções longas podem ser especificadas em ambos linha de comandos e
no sistema  B<dpkg-buildpackage> e nos ficheiros de configuração do
utilizador. Cada linha no ficheiro de configuração é ou uma opção
(exatamente igual a uma opção de linha de comandos mas sem os hífens
iniciais) ou um comentário (se começar com ‘B<#>’).

=over 

=item B<--build=>I<type>

Especifica o I<type> de compilação a partir de uma lista separada por
vírgulas de componentes (desde dpkg 1.18.5). Passado para
B<dpkg-genchanges>.

Os valores permitidos são:

=over 

=item B<source>

Compila o pacote fonte.

B<Nota:> Quando se usa este valor autónomo e se o que você quer é
simplesmente (re-)compilar o pacote fonte a partir de uma árvore fonte
limpa, usar B<dpkg-source> directamente é sempre uma melhor opção pois não
requer que sejam instaladas quaisquer dependências de compilação as quais,
caso contrário, são precisas para ser capaz de chamar o alvo B<clean>.

=item B<any>

Compila os pacotes binários específicos de arquitectura.

=item B<all>

Compila os pacotes binários independentes de arquitectura.

=item B<binary>

Compila os pacotes binários independentes e específicos de
arquitectura. Isto é um alias para B<any,all>.

=item B<full>

Compila tudo. Isto é um alias para B<source,any,all>, e o mesmo que o caso
predefinido quando não é especificada nenhuma opção de compilação.

=back

=item B<-g>

Equivalente a B<--build=source,all> (desde dpkg 1.17.11).

=item B<-G>

Equivalente a B<--build=source,any> (desde dpkg 1.17.11).

=item B<-b>

Equivalente a B<--build=binary> ou B<--build=any,all>.

=item B<-B>

Equivalente a B<--build=any>.

=item B<-A>

Equivalente a B<--build=all>.

=item B<-S>

Equivalente a B<--build=source>.

=item B<-F>

Equivalente a B<--build=full>, B<--build=source,binary> ou
B<--build=source,any,all> (desde dpkg 1.15.8).

=item B<--target=>I<target>[,...]

=item B<--target> I<target>[,...]

=item B<-T>, B<--rules-target=>I<target>[,...]

Chama B<debian/rules> I<target> uma vez por cada alvo especificado, após ter
configurado o ambiente de compilação (excepto para chamar B<dpkg-source
--before-build>), e pára o processo de compilação do pacote aqui (desde dpkg
1.15.0, opção longa desde dpkg 1.18.8, suporte a multi-alvo desde dpkg
1.18.16).  Se B<--as-root> for também fornecido, então o comando é executado
como root (veja B<--root-command>).  Note que alvos conhecidos que são
obrigados a correr como root não precisam desta opção (isto é, os alvos
B<clean>, B<binary>, B<binary-arch> e B<binary-indep>).

=item B<--as-root>

Apenas significativo junto com B<--target> (desde dpkg 1.15.0). Requer que o
alvo seja corrido com direitos de root.

=item B<-si>

=item B<-sa>

=item B<-sd>

=item B<-v>I<version>

=item B<-C>I<changes-description>

=item B<-m>, B<--release-by=>I<maintainer-address>

=item B<-e>, B<--build-by=>I<maintainer-address>

Passado sem alterações ao B<dpkg-genchanges>. Veja o seu manual.

=item B<-a>, B<--host-arch> I<architecture>

Especifica a arquitectura Debian para qual compilamos (opção longa desde
dpkg 1.17.17). A arquitectura da máquina onde compilamos é determinada
automaticamente, e é também a predefinida para a máquina anfitriã.

=item B<-t>, B<--host-type> I<gnu-system-type>

Especifica o tipo de sistema GNU para qual compilamos (opção longa desde
dpkg 1.17.17). Pode ser usado no lugar de B<--host-arch> ou como um
complemento para sobrepor o tipo de sistema GNU predefinido da arquitectura
Debian anfitriã.

=item B<--target-arch> I<architecture>

Especifica a arquitectura Debian para que os binários são compilados (desde
dpkg 1.17.17). O valor predefinido é o da máquina anfitriã.

=item B<--target-type> I<gnu-system-type>

Especifica o tipo de sistema GNU para que os binários são compilados (desde
dpkg 1.17.17). Pode ser usado no lugar de B<--target-arch> ou como um
complemento para sobrepor o tipo de sistema GNU predefinido da arquitectura
Debian do alvo.

=item B<-P>, B<--build-profiles=>I<profile>[B<,>...]

Especifica os perfil(es) que compilamos, como uma lista separada por
vírgulas (desde dpkg 1.17.2, opção longa desde dpkg 1.18.8). O comportamento
predefinido é compilar para nenhum perfil específico. Também os define (como
uma lista separada por espaços) como a variável de ambiente
B<DEB_BUILD_PROFILES> o que permite, por exemplo, ficheiros B<debian/rules>
usarem esta informação para compilações condicionais.

=item B<-j>, B<--jobs>[=I<jobs>|B<auto>]

Número de trabalhos permitidos para correr em simultâneo, número de
trabalhos que correspondem ao número de processadores online. Se for
especificado B<auto>(desde dpkg 1.17.10), ou não for especificado um número
limite de I<jobs>, equivalente à opção B<make>(1) do mesmo nome (desde dpkg
1.14.7, opção longa desde dpkg 1.18.8). Irá adiciona-se a ele próprio à
variável de ambiente B<MAKEFLAGS>, a qual pode fazer com que todas as
invocações subsequentes do make herdem a opção. assim forçando a definição
paralela no empacotamento (e possivelmente o sistema de compilação do autor
se esse usar o make) independentemente do seu suporte para compilações
paralelas, a qual pode causar falhas de compilação. Adiciona também
B<parallel=>I<jobs> ou B<parallel> A`variável de ambiente
B<DEB_BUILD_OPTIONS> que permite a ficheiros debian/rules usar esta
informação para os seus próprios objectivos. O valor B<-j> irá sobrepor a
opção B<parallel=>I<jobs> ou B<parallel> na variável de ambiente
B<DEB_BUILD_OPTIONS>. Note que o valor B<auto> irá ser substituído pelo
número real de processadores actuais activos, e como tal, não será propagado
para nenhum processo filho. Se o número de processadores online não poder
ser deduzido, então o código ira cair para o uso de execução em série (desde
dpkg 1.18.15), no entanto isto apenas deverá acontecer em sistemas exóticos
e não suportados.

=item B<-J>, B<--jobs-try>[=I<jobs>|B<auto>]

Esta opção (desde dpkg 1.18.2, opção longa desde dpkg 1.18.8) é equivalente
à opção B<-j> excepto em que não define a variável de ambiente B<MAKEFLAGS>,
e como tal é mais segura de usar com qualquer pacote incluindo aqueles que
não são seguros de compilação em paralelo.

B<auto> é o comportamento predefinido (desde dpkg 1.18.11). Definir o número
de trabalhos para 1 irá restaurar um comportamento em série.

=item B<-D>, B<--check-builddeps>

Verifica dependências e conflitos de compilação; aborta se não satisfeitos
(opção longa desde dpkg 1.18.8). Este é o comportamento predefinido.

=item B<-d>, B<--no-check-builddeps>

Não verifica dependências e conflitos de compilação (opção longa desde dpkg
1.18.8).

=item B<--ignore-builtin-builddeps>

Não verifica dependências de compilação embutidas e conflitos (desde dpkg
1.18.2). Estas as dependências de compilação implícitas e específicas da
distribuição requeridas num ambiente de compilação, o chamado conjunto de
pacotes Build-Essential.

=item B<--rules-requires-root>

Não respeita o campo B<Rules-Requires-Root>, caindo para o seu valor de
predefinição antiga (desde dpkg 1.19.1).

=item B<-nc>, B<--no-pre-clean>

Não limpa a árvore fonte antes de compilar (opção longa desde dpkg
1.18.8). Implica B<-b> se nada mais foi seleccionado entre B<-F>, B<-g>,
B<-G>, B<-B>, B<-A> ou B<-S>. Implica B<-d> com B<-S> (desde dpkg 1.18.0).

=item B<--pre-clean>

Limpa a árvore fonte antes de compilar (desde dpkg 1.18.8). Este é o
comportamento predefinido.

=item B<-tc>, B<--post-clean>

Limpa a árvore fonte (usando I<gain-root-command> B<debian/rules clean>)
após o pacote ter sido compilado (opção longa desde dpkg 1.18.8).

=item B<--no-post-clean>

Não limpa a árvore fonte após o pacote ter sido compilado (desde dpkg
1.19.1). Este é o comportamento predefinido.

=item B<--sanitize-env>

Higieniza o ambiente de compilação (desde dpkg 1.20.0). Isto irá repor ou
remover variáveis de ambiente, umask, e quaisquer outros atributos de
processo que poderiam caso contrário afectar adversamente a compilação dos
pacotes. Porque o ponto de entrada oficial para compilar pacotes é
B<debian/rules>, os pacotes não podem confiar que estas definições estejam
no lugar, e assim devem funcionar mesmo quando elas não estão. O que há a
higienizar é específico do fornecedor.

=item B<-r>, B<--root-command=>I<gain-root-command>

Quando o B<dpkg-buildpackage> precisa de executar parte do processo de
compilação como root, prefixa o comando que executa com I<gain-root-command>
se foi especificado um (opção longa desde dpkg 1.18.8). Caso contrário, se
nenhum foi especificado, será usado por predefinição o B<fakeroot>, se o
comando estiver presente. I<gain-root-command> deverá começar com o nome de
um programa presente na B<PATH> e receberá como argumentos o nome do comando
real a correr e os argumentos que este deve receber. O I<gain-root-command>
pode incluir parâmetros (têm se ser separados por espaços) mas não
meta-caracteres da shell. O I<gain-root-command>pode ser tipicamente
B<fakeroot>, B<sudo>, B<super> ou B<really>. O B<su> não é apropriado, pois
ele só pode invocar a shell do utilizador com B<-c> em vez de passar
argumentos individualmente aos comandos que corre.

=item B<-R>, B<--rules-file=>I<rules-file>

Compilar um pacote Debian geralmente involve invocar B<debian/rules> como um
comando com vários parâmetros standard (desde dpkg 1.14.17, opção longa
desde dpkg 1.18.8). Com esta opção é possível usar outra invocação de
programa para compilar o pacote (pode incluir parâmetros separados por
espaços). Em alternativa pode ser usado para executar o ficheiro de regras
standard com outro programa make (por exemplo ao usar B</usr/local/bin/make
-f debian/rules> como I<rules-file>).

=item B<--check-command=>I<check-command>

Comando usado para verificar o próprio ficheiro B<.changes> e qualquer
artefacto de compilação referenciado no ficheiro (desde dpkg 1.17.6). O
comando deve receber o nome de caminho de B<.changes> como um
argumento. Este comando é geralmente o B<lintian>.

=item B<--check-option=>I<opt>

Passa a opção I<opção> ao I<comando-de-verificação> especificado com
B<DEB_CHECK_COMMAND> ou B<--check-command> (desde dpkg 1.17.6). Pode ser
usado várias vezes.

=item B<--hook->I<hook-name>B<=>I<hook-command>

Define o código shell especificado I<hook-command> como o hook I<hook-name>,
o qual vai correr nos tempos especificados nos passos de execução (desde
dpkg 1.17.6). Os hooks irão sempre ser executados mesmo que a acção seguinte
não seja executada (excepto para o hook B<binary>). Todos os hooks irão
correr no directório fonte desempacotado.

B<Nota:> Os hooks podem afectar o processo de compilação, e causar falhas ao
compilar se os seus comandos falharem,  portanto esteja atento a
consequências indesejadas.

Os I<nome-de-hook> actualmente suportados são:

B<init preclean source build binary buildinfo changes postclean check sign
done>

O I<comando-hook> suporta as seguintes strings de formato de substituição,
que lhes serão aplicadas antes da execução.

=over 

=item B<%%>

Um único caracteres %.

=item B<%a>

Um valor booleano (0 ou 1), que representa se a seguinte acção foi
executada.

=item B<%p>

O nome do pacote fonte.

=item B<%v>

A versão do pacote fonte

=item B<%s>

A versão do pacote fonte (sem a época).

=item B<%u>

A versão do autor.

=back

=item B<--buildinfo-option=>I<opt>

Passa a opção I<opt> ao B<dpkg-genbuildinfo> (desde dpkg 1.18.11).  Pode ser
usado várias vezes.

=item B<-p>, B<--sign-command=>I<sign-command>

Quando B<dpkg-buildpackage> precisa de executar GPG para assinar um ficheiro
de controle de fonte (B<.dsc>) ou um ficheiro B<.changes> irá correr
I<sign-command> (procurando na B<PATH> se necessário) em vez de B<gpg>
(opção longa desde dpkg 1.18.8).  I<sign-command> irá obter todos os
argumentos que B<gpg> teriam obtido. I<sign-command> não deve conter espaços
ou outros meta-caracteres de shell.

=item B<-k>, B<--sign-key=>I<key-id>

Especifica o ID de chave a usar quando assina pacotes. (opção longa desde
dpkg 1.18.8).

=item B<-us>, B<--unsigned-source>

Não assina o pacote fonte (opção longa desde dpkg 1.18.8).

=item B<-ui>, B<--unsigned-buildinfo>

Não assina o ficheiro B<.buildinfo> (desde dpkg 1.18.19).

=item B<-uc>, B<--unsigned-changes>

Não assina os ficheiros B<.buildinfo> e B<.changes> (opção longa desde dpkg
1.18.8).

=item B<--no-sign>

Não assina nenhum ficheiro, isto inclui o pacote fonte, o ficheiro
B<.buildinfo> e o ficheiro B<.changes> (desde dpkg 1.18.20).

=item B<--force-sign>

Força o assinar dos ficheiros resultantes (desde dpkg 1.17.0),
independentemente de B<-us>, B<--unsigned-source>, B<-ui>,
B<--unsigned-buildinfo>, B<-uc>, B<--unsigned-changes> ou de outras
heurísticas internas.

=item B<-sn>

=item B<-ss>

=item B<-sA>

=item B<-sk>

=item B<-su>

=item B<-sr>

=item B<-sK>

=item B<-sU>

=item B<-sR>

=item B<-i>, B<--diff-ignore>[=I<regex>]

=item B<-I>, B<--tar-ignore>[=I<pattern>]

=item B<-z>, B<--compression-level=>I<level>

=item B<-Z>, B<--compression=>I<compressor>

Passado sem alterações ao B<dpkg-source>. Veja o seu manual.

=item B<--source-option=>I<opt>

Passa a opção I<opção> ao B<dpkg-source> (desde dpkg 1.15.6. Pode ser usado
várias vezes.

=item B<--changes-option=>I<opt>

Passa a opção I<opção> ao B<dpkg-genchanges> (desde dpkg 1.15.6).  Pode ser
usado várias vezes.

=item B<--admindir=>I<dir>

=item B<--admindir> I<dir>

Altera a localização da base de dados do B<dpkg> (desde dpkg 1.14.0). A
localização predefinida é I<%ADMINDIR%>.

=item B<-?>, B<--help>

Mostra a mensagem de utilização e termina.

=item B<--version>

Mostra a versão e termina.

=back

=head1 AMBIENTE

=head2 Ambiente externo

=over 

=item B<DEB_CHECK_COMMAND>

Se definido, será usado como o comando para verificar o ficheiro B<.changes>
(desde dpkg 1.17.6). Sobreposto pela opção B<--check-command>.

=item B<DEB_SIGN_KEYID>

Se definido, será usado para assinar os ficheiros B<.changes> e B<.dsc>
(desde dpkg 1.17.2). Sobreposto pela opção B<--sign-key>.

=item B<DEB_BUILD_OPTIONS>

Se definido, irá conter uma lista de opções separadas por espaços que podem
afectar o processo de compilação em I<debian/rules>, e o comportamento de
alguns comandos do dpkg.

Com B<nocheck> a variável B<DEB_CHECK_COMMAND> será ignorada. com
B<parallel=>I<N> os trabalhos paralelos serão definidos para I<N>,
sobrepostos pela opção B<--jobs-try>.

=item B<DEB_BUILD_PROFILES>

Se definido, será usado como perfil(es) de compilação activos para o pacote
a ser compilado (desde dpkg 1.17.2). É uma lista separada por espaços de
nomes de perfis. Sobreposto pela opção B<-P>.

=item B<DPKG_COLORS>

Define o modo de cor (desde dpkg 1.18.5). Os valores actualmente aceites
são: B<auto> (predefinido), B<always> e B<never>.

=item B<DPKG_NLS>

Se definida, será usada para decidir se deve activar o Suporte a Linguagem
Nativa. Também como conhecido como suporte de internacionalização (ou i18n)
(desde dpkg 1.19.0). Os valores aceites são B<0> e B<1> (predefinição).

=back

=head2 Ambiente interno

Mesmo que B<dpkg-buildpackage> exporte algumas variáveis, o B<debian/rules>
não deve confiar na sua presença e deve em vez disso usar a interface
respectiva para obter os valore que precisa, porque esse ficheiro é o ponto
de entrada principal para compilar pacotes e deve ser suportado poder
fazê-lo sozinho.

=over 

=item B<DEB_BUILD_*>

=item B<DEB_HOST_*>

=item B<DEB_TARGET_*>

B<dpkg-architecture> é chamado com os parâmetros B<-a> e B<-t>
reencaminhados. Qualquer variável  que seja resultante da sua opção B<-s> é
integrada no ambiente de compilação.

=item B<DEB_RULES_REQUIRES_ROOT>

Esta variável é definida para o valor obtido a partir do campo
B<Rules-Requires-Root> ou a partir da linha de comandos. Quando definida,
será um valor válido para o campo B<Rules-Requires-Root>. É usada para
notificar B<debian/rules> se a especificação B<rootless-builds.txt> é
suportada.

=item B<DEB_GAIN_ROOT_CMD>

Esta variável é definida para I<gain-root-command> quando o campo
B<Rules-Requires-Root> é definido para um valor diferente de B<no> e
B<binary-targets>.

=item B<SOURCE_DATE_EPOCH>

Esta variável é definida à marca temporal de Unix desde a época da última
entrada em I<debian/changelog>, se não estiver já definida.

=back

=head1 FICHEIROS

=over 

=item I<%PKGCONFDIR%/buildpackage.conf>

Ficheiro de configuração geral do sistema

=item I<$XDG_CONFIG_HOME/dpkg/buildpackage.conf> ou

=item I<$HOME/.config/dpkg/buildpackage.conf>

Ficheiro de configuração do utilizador.

=back

=head1 NOTAS

=head2 As bandeiras de compilador já não são exportadas

Entre dpkg 1.14.17 e 1.16.1, B<dpkg-buildpackage> exportava as bandeiras de
compilador (B<CFLAGS>, B<CXXFLAGS>, B<FFLAGS>, B<CPPFLAGS> e B<LDFLAGS>) com
valores como retornados por B<dpkg-buildflags>. Isto já não acontece.

=head2 Metas de compilação predefinidas

B<dpkg-buildpackage> está  a usar os alvos B<build-arch> e B<build-indep>
desde dpkg 1.16.2. Esses alvos são assim obrigatórios. Mas para evitar
ruturas de pacotes existentes, e facilitar a transição, se o pacote fonte
não compilar ambos pacotes binários independentes e dependentes da
arquitectura (desde dpkg 1.18.8) irá regressar ao uso de alvo B<build> se
B<make -f debian/rules -qn> I<build-target> retornar 2 como código de saída.

=head1 BUGS

Deverá ser possível especificar espaços e meta-caracteres de shell e
argumentos iniciais para I<gain-root-command> e I<sign-command>.

=head1 VEJA TAMBÉM

B<dpkg-source>(1), B<dpkg-architecture>(1), B<dpkg-buildflags>(1),
B<dpkg-genbuildinfo>(1), B<dpkg-genchanges>(1), B<fakeroot>(1),
B<lintian>(1), B<gpg>(1).


=head1 TRADUÇÃO

Américo Monteiro

Se encontrar algum erro na tradução deste documento, por favor comunique para
Américo Monteiro <a_monteiro@gmx.com>.
