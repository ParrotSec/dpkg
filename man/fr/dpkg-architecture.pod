
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

dpkg-architecture - Fixer et déterminer l'architecture pour la construction
d'un paquet

=head1 SYNOPSIS

B<dpkg-architecture> [I<option>...] [I<commande>]

=head1 DESCRIPTION

B<dpkg-architecture> aide à déterminer et à fixer l'architecture de
construction et l'architecture hôte pour la création d'un paquet.

The build architecture is always determined by either the B<DEB_BUILD_ARCH>
variable if set (and B<--force> not being specified) or by an external call
to B<dpkg>(1), and cannot be set at the command line.

You can specify the host architecture by providing one or both of the
options B<--host-arch> and B<--host-type>, otherwise the B<DEB_HOST_ARCH>
variable is used if set (and B<--force> not being specified). The default is
determined by an external call to B<gcc>(1), or the same as the build
architecture if B<CC> or gcc are both not available. One out of
B<--host-arch> and B<--host-type> is sufficient, the value of the other will
be set to a usable default. Indeed, it is often better to only specify one,
because B<dpkg-architecture> will warn you if your choice does not match the
default.

=head1 COMMANDES

=over 

=item B<-l>, B<--list>

Affiche les variables d'environnement, une par ligne, en utilisant le format
I<VARIABLE=valeur>. C'est l'action par défaut.

=item B<-e>, B<--equal> I<architecture>

Vérifie l'égalité d'architectures (depuis S<dpkg 1.13.13).> Cela compare
l'architecture Debian en cours (ou celle spécifiée) à I<architecture> afin
de vérifier leur égalité. Cette action ne gère pas les architectures
joker. La commande quitte avec un code de retour de B<0> si l'architecture
correspond et de B<1> dans le cas contraire.

=item B<-i>, B<--is> I<architecture-joker>

Vérifie l'identité des architectures (depuis S<dpkg 1.13.13).> Cela compare
l'architecture Debian en cours (ou celle spécifiée) à I<architecture-joker>
(après expansion de celle-ci) afin de vérifier leur correspondance. La
commande quitte avec un code de retour de B<0> si l'architecture correspond
et de B<1> dans le cas contraire.

=item B<-q>, B<--query> I<nom-de-variable>

Affiche la valeur d'une seule variable.

=item B<-s>, B<--print-set>

Print an export command. This can be used to set the environment variables
using the POSIX shell or make B<eval>, depending on the output format.

=item B<-u>, B<--print-unset>

Print a similar command to B<--print-set> but to unset all variables.

=item B<-c>, B<--command> I<chaîne-de-commande>

Exécute une I<chaîne-de-commande> dans un environnement où toutes les
variables sont positionnées aux valeurs spécifiées.

=item B<-L>, B<--list-known>

Affiche une liste des architectures valables. Elle peut être restreinte par
une ou plusieurs des options correspondantes B<--match-wildcard>,
B<--match-bits> ou B<--match-endian> (depuis S<dpkg 1.17.14).>

=item B<-?>, B<--help>

Affiche un message d'aide puis quitte.

=item B<--version>

Affiche le numéro de version puis quitte.

=back

=head1 OPTIONS

=over 

=item B<-a>, B<--host-arch> I<architecture>

Définit l'architecture Debian en cours.

=item B<-t>, B<--host-type> I<type-de-système-gnu>

Définit le type de système GNU en cours.

=item B<-A>, B<--target-arch> I<architecture>

Définit l'architecture Debian de la cible (depuis S<dpkg 1.17.14).>

=item B<-T>, B<--target-type> I<type-de-système-gnu>

Définit le type de système GNU de la cible (depuis S<dpkg 1.17.14).>

=item B<-W>, B<--match-wildcard> I<architecture-joker>

Restreindre les architectures listées par B<--list-known> à celles
correspondant à l'architecture-joker (depuis S<dpkg 1.17.14).>

=item B<-B>, B<--match-bits> I<bits-de-l'architecture>

Restreindre les architectures listées par B<--list-known> à celles employant
un CPU disposant du nombre de bits indiqués (depuis S<dpkg 1.17.14).> Soit
B<32>, S<soit B<64>.>

=item B<-E>, B<--match-endian> I<boutisme-d'architecture>

Restreindre les architectures listées par B<--list-known> à celles
correspondant au boutisme spécifié (depuis S<dpkg 1.17.14).> Soit B<little>,
soit B<big>.

=item B<--print-format> I<format>

Sets the output format for B<--print-set> and B<--print-unset> (since dpkg
1.20.6), to either B<shell> (default) or B<make>.

=item B<-f>, B<--force>

Les valeurs positionnées par les variables d'environnement ayant le même nom
que celles utilisées par les scripts sont prises en compte (c'est-à-dire
utilisées par B<dpkg-architecture>), sauf si cette option est présente. Cela
permet à un utilisateur de surcharger une valeur même lorsque l'appel à
B<dpkg-architecture> est inclus dans un autre script (par exemple
B<dpkg-buildpackage>(1)).

=back

=head1 TERMINOLOGIE

=over 

=item Machine de construction

Machine sur laquelle le paquet est construit.

=item Machine hôte

Machine pour laquelle le paquet est construit.

=item Machine cible

La machine pour laquelle le compilateur construit. Cela est nécessaire
uniquement lors de la construction d'une chaîne d'outils de compilation
croisée qui sera construite sur l'architecture de construction, pour être
exécutée sur l'architecture hôte, afin de construire du code pour
l'architecture cible.

=item Architecture Debian

Chaîne de caractères de l'architecture Debian qui spécifie l'emplacement
dans l'archive FTP. Par S<exemple :> i386, sparc, hurd-i386.

=item N-uplet d'architecture Debian

Un n-uplet d'architecture Debian est l'architecture pleinement qualifiée
avec tous ses composants énoncés. C'est différent des architectures Debian
en ce que le composant I<processeur> n'intègre pas l'I<ABI>. Le n-uplet
actuel a la forme I<ABI>-I<libc>-I<os>-I<processeur>. S<Exemples :>
base-gnu-linux-amd64, eabihf-musl-linux-arm.

=item Architecture Debian joker

Une architecture Debian joker est une architecture spéciale qui correspond à
toutes les architectures réelles qui en font partie. Il est en général de la
forme d'un n-uplet d'architecture Debian avec quatre éléments ou moins dont
au moins l'un d'eux est B<any>. Les éléments manquants du n-uplet sont
préfixés implicitement par B<any>, et donc les paires suivantes sont
équivalentes.

=over 

=item B<any>-B<any>-B<any>-B<any> = B<any>

=item B<any>-B<any>-I<os>-B<any> = I<os>-B<any>

=item B<any>-I<libc>-B<any>-B<any> = I<libc>-B<any>-B<any>

=back

S<Exemples :> linux-any, any-i386, hurd-any, eabi-any-any-arm, musl-any-any.

=item Type de système GNU

Chaîne de caractères définissant l'architecture et constituée de deux
parties séparées par un S<tiret :> processeur et système. Par S<exemple :>
i586-linux-gnu, sparc-linux-gnu, i386-gnu, x86_64-netbsd.

=item n-uplet multiarchitecture

Type en clair de système GNU, utilisé pour les chemins du système de
fichiers. Ce n-uplet ne change pas même quand l'ISA de base est incrémentée,
de sorte que les chemins résultants sont stables dans la durée. La seule
différence actuelle avec le type du système GNU est que la partie processeur
pour les systèmes basés sur l'i386 est toujours i386. S<Exemples :>
i386-linux-gnu, x86_64-linux-gnu. Exemple de S<chemins :>
/lib/powerpc64le-linux-gnu/, /usr/lib/i386-kfreebsd-gnu/.

=back

=head1 VARIABLES D'ENVIRONNEMENT

The following variables are read from the environment (unless B<--force> has
been specified) and set by B<dpkg-architecture> (see the B<TERMS> section
for a description of the naming scheme):

=over 

=item B<DEB_BUILD_ARCH>

Architecture Debian de la machine de construction.

=item B<DEB_BUILD_ARCH_ABI>

The Debian ABI name of the build machine (since dpkg 1.18.11).

=item B<DEB_BUILD_ARCH_LIBC>

Nom de la libc Debian de la machine de construction (depuis S<dpkg 1.18.11).>

=item B<DEB_BUILD_ARCH_OS>

Nom du système Debian de la machine de construction (depuis S<dpkg 1.13.2).>

=item B<DEB_BUILD_ARCH_CPU>

The Debian CPU name of the build machine (since dpkg 1.13.2).

=item B<DEB_BUILD_ARCH_BITS>

Taille de pointeur de la machine de construction (en bits, depuis
S<dpkg 1.15.4).>

=item B<DEB_BUILD_ARCH_ENDIAN>

Boutisme de la machine de construction (petit ou gros, depuis S<dpkg 1.15.4).>

=item B<DEB_BUILD_GNU_CPU>

The GNU CPU part of B<DEB_BUILD_GNU_TYPE>.

=item B<DEB_BUILD_GNU_SYSTEM>

The GNU system part of B<DEB_BUILD_GNU_TYPE>.

=item B<DEB_BUILD_GNU_TYPE>

Type de système GNU de la machine de construction.

=item B<DEB_BUILD_MULTIARCH>

Le type en clair de système GNU de la machine de construction, utilisé pour
les chemins du système de fichiers (depuis S<dpkg 1.16.0).>

=item B<DEB_HOST_ARCH>

Architecture Debian de la machine hôte.

=item B<DEB_HOST_ARCH_ABI>

The Debian ABI name of the host machine (since dpkg 1.18.11).

=item B<DEB_HOST_ARCH_LIBC>

Nom de la libc Debian de la machine hôte (depuis S<dpkg 1.18.11).>

=item B<DEB_HOST_ARCH_OS>

Nom du système Debian de la machine hôte (depuis S<dpkg 1.13.2).>

=item B<DEB_HOST_ARCH_CPU>

The Debian CPU name of the host machine (since dpkg 1.13.2).

=item B<DEB_HOST_ARCH_BITS>

Taille de pointeur de la machine hôte (en bits, depuis S<dpkg 1.15.4).>

=item B<DEB_HOST_ARCH_ENDIAN>

Boutisme de la machine hôte (petit ou gros, depuis S<dpkg 1.15.4).>

=item B<DEB_HOST_GNU_CPU>

The GNU CPU part of B<DEB_HOST_GNU_TYPE>.

=item B<DEB_HOST_GNU_SYSTEM>

The GNU system part of B<DEB_HOST_GNU_TYPE>.

=item B<DEB_HOST_GNU_TYPE>

Type de système GNU de la machine hôte.

=item B<DEB_HOST_MULTIARCH>

Le type en clair de système GNU de la machine hôte, utilisé pour les chemins
du système de fichiers (depuis S<dpkg 1.16.0).>

=item B<DEB_TARGET_ARCH>

L'architecture Debian de la machine cible (depuis S<dpkg 1.17.14).>

=item B<DEB_TARGET_ARCH_ABI>

The Debian ABI name of the target machine (since dpkg 1.18.11).

=item B<DEB_TARGET_ARCH_LIBC>

Nom de la libc Debian de la machine cible (depuis S<dpkg 1.18.11).>

=item B<DEB_TARGET_ARCH_OS>

Nom du système Debian de la machine cible (depuis S<dpkg 1.17.14).>

=item B<DEB_TARGET_ARCH_CPU>

The Debian CPU name of the target machine (since dpkg 1.17.14).

=item B<DEB_TARGET_ARCH_BITS>

Taille de pointeur de la machine cible (en bits, depuis S<dpkg 1.17.14).>

=item B<DEB_TARGET_ARCH_ENDIAN>

Boutisme de la machine cible (petit ou gros, depuis S<dpkg 1.17.14).>

=item B<DEB_TARGET_GNU_CPU>

The GNU CPU part of B<DEB_TARGET_GNU_TYPE> (since dpkg 1.17.14).

=item B<DEB_TARGET_GNU_SYSTEM>

The GNU system part of B<DEB_TARGET_GNU_TYPE> (since dpkg 1.17.14).

=item B<DEB_TARGET_GNU_TYPE>

Type du système GNU de la machine cible (depuis S<dpkg 1.17.14).>

=item B<DEB_TARGET_MULTIARCH>

Le type en clair du système GNU de la machine cible, utilisé pour les
chemins du système de fichiers (depuis S<dpkg 1.17.14).>

=back

=head1 FICHIERS

=head2 Tables d'architectures

Tous ces fichiers sont nécessaires afin que B<dpkg-architecture> puisse
fonctionner. Leurs emplacements peuvent être modifiés lors du traitement à
l'aide de la variable d'environnement B<DPKG_DATADIR>. Ces tables
contiennent en première ligne un pseudo-champ de B<Version> de format pour
indiquer leur format de sorte que les analyseurs peuvent vérifier s'ils les
comprennent, tel que S<« # Version=1.0 ».>

=over 

=item I<%PKGDATADIR%/table-processeur>

Table des noms de processeurs connus et liaison avec leur nom
GNU. S<Version 1.0> de format (depuis S<dpkg 1.13.2).>

=item I<%PKGDATADIR%/table-système-exploitation>

Table des noms des systèmes d'exploitation connus et liaison avec leurs noms
GNU. S<Version 2.0> de format (depuis S<dpkg 1.18.11).>

=item I<%PKGDATADIR%/table-n-uplet>

Correspondances entre les n-uplets de l'architecture Debian et les noms des
architectures Debian. Format S<version 1.0> (depuis S<dpkg 1.18.11).>

=item I<%PKGDATADIR%/table-ABI>

Table des substituts d'attributs d'ABI d'architecture Debian. Format
S<version 2.0> (depuis S<dpkg 1.18.11).>

=back

=head2 Gestion de l'empaquetage

=over 

=item I<%PKGDATADIR%/architecture.mk>

Un fragment de fichier Makefile qui définit correctement et exporte toutes
les variables que B<dpkg-architecture> peut fournir (depuis S<dpkg 1.16.1).>

=back

=head1 EXEMPLES

B<dpkg-buildpackage> accepte l'option B<-a>, et la passe à
B<dpkg-architecture>. Voici d'autres S<exemples :>

=over 

 CC=i386-gnu-gcc dpkg-architecture -c debian/rules build

 eval $(dpkg-architecture -u)

=back

Vérifie si l'architecture en cours (ou celle spécifiée) est identique à une
S<architecture :>

=over 

 dpkg-architecture -elinux-alpha

 dpkg-architecture -amips -elinux-mips

=back

Vérifie si l'architecture en cours (ou celle spécifiée) est un système
S<Linux :>

=over 

 dpkg-architecture -ilinux-any

 dpkg-architecture -ai386 -ilinux-any

=back

=head2 Utilisation dans debian/rules

Les variables d'environnement définies par B<dpkg-architecture> sont
fournies à I<debian/rules> comme variables pour make (consultez la
documentation de make). Cependant, vous ne devez pas compter là-dessus
puisque cela empêche les appels manuels à ce script. À la place, vous devez
toujours les initialiser en utilisant B<dpkg-architecture> avec l'option
B<-q>. Voici quelques exemples, qui indiquent aussi comment améliorer la
gestion des compilations croisées de votre S<paquet :>

Récupération du type de système GNU et passage à S<./configure :>

=over 

 DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
 DEB_HOST_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
 [...]
 ifeq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
   confflags += --build=$(DEB_HOST_GNU_TYPE)
 else
   confflags += --build=$(DEB_BUILD_GNU_TYPE) \
                --host=$(DEB_HOST_GNU_TYPE)
 endif
 [...]
 ./configure $(confflags)

=back

Effectuer une action pour une architecture S<spécifique :>

=over 

 DEB_HOST_ARCH ?= $(shell dpkg-architecture -qDEB_HOST_ARCH)

 ifeq ($(DEB_HOST_ARCH),alpha)
   [...]
 endif

=back

Ou, si vous n'avez besoin que de vérifier le type du processeur et du
système, utilisez les variables B<DEB_HOST_ARCH_CPU> ou B<DEB_HOST_ARCH_OS>.

Veuillez noter qu'il est également possible d'utiliser un fragment externe
de fichier Makefile pour définir correctement toutes les variables que
B<dpkg-architecture> peut S<fournir :>

=over 

 include %PKGDATADIR%/architecture.mk

 ifeq ($(DEB_HOST_ARCH),alpha)
   [...]
 endif

=back

Dans tous les cas, il ne faut jamais utiliser B<dpkg --print-architecture>
pour récupérer les informations relatives à l'architecture pendant la
construction d'un paquet.

=head1 ENVIRONNEMENT

=over 

=item B<DPKG_DATADIR>

Si cette variable est définie, elle sera utilisée comme répertoire de
données de B<dpkg> où sont placées les tables d'architecture (depuis
S<dpkg 1.14.17).> Par défaut «%PKGDATADIR%».

=item B<DPKG_COLORS>

Définit le mode de couleur (depuis S<dpkg 1.18.5).> Les valeurs actuellement
acceptées sont B<auto> (par défaut), B<always> et B<never>.

=item B<DPKG_NLS>

Si cette variable est définie, elle sera utilisée pour décider l'activation
de la prise en charge des langues (NLS S<– Native> Language Support), connu
aussi comme la gestion de l'internationalisation (ou i18n) (depuis
S<dpkg 1.19.0).> Les valeurs permises S<sont :> B<0> et B<1> (par défaut).

=back

=head1 NOTES

Tous les noms de commandes et d'options longs ne sont disponibles qu'à
partir de S<dpkg 1.17.17.>

=head1 VOIR AUSSI

B<dpkg-buildpackage>(1).


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
