
        *****************************************************
        *           GENERATED FILE, DO NOT EDIT             *
        * THIS IS NO SOURCE FILE, BUT RESULT OF COMPILATION *
        *****************************************************

This file was generated by po4a(7). Do not store it (in VCS, for example),
but store the PO file used as source file by po4a-translate.

In fact, consider this as a binary, and the PO file as a regular .c file:
If the PO get lost, keeping this translation up-to-date will be harder.

=encoding UTF-8

=head1 NOM

deb-substvars - Variables de substitution de source Debian

=head1 SYNOPSIS

B<debian/substvars>, B<debian/>I<binary-package>B<.substvars>

=head1 DESCRIPTION

Avant que B<dpkg-source>, B<dpkg-gencontrol> et B<dpkg-genchanges>
n'écrivent leurs informations de contrôle (dans le fichier source de
contrôle B<.dsc> pour B<dpkg-source> et sur la sortie standard pour
B<dpkg-gencontrol> et B<dpkg-genchanges>), ils réalisent quelques
substitutions de variables dans le fichier de sortie.

Une substitution de variable est de la S<forme :> B<${>I<nom-variable>B<}>. Les
noms de variable consistent en caractères alphanumériques (a-zA-Z0-9),
traits d'union (-) et S<« deux> S<points »> S<(:) ;> ils commencent par une lettre ou
un chiffre et sont sensibles à la casse même si ils se réfèrent à d'autres
entités qui préservent la casse. La substitution se fait répétitivement
jusqu'à ce qu'il n'en reste aucune à S<faire ;> le texte entier du champ après
la substitution est réexaminé pour chercher d'autres substitutions.

Quand toutes les substitutions ont été faites, chaque occurrence de la
chaîne B<${}> (laquelle n'est pas une substitution autorisée) est remplacée
par un signe B<$>.

Alors que le remplacement de variables est effectué sur tous les champs de
contrôle, certains de ces champs sont utilisés et nécessaires pendant la
construction alors même que la substitution n'a pas encore pu être
effectuée. Cela explique pourquoi il n'est pas possible d'utiliser de
variables dans les champs B<Package>, B<Source> et B<Architecture>.

La substitution de variables se fait dans le contenu des champs après leur
analyse. En conséquence, si vous souhaitez qu'une variable soit remplacée
sur plusieurs lignes, il n'est pas nécessaire de placer une espace après le
retour à la ligne. Cela se fait implicitement quand le champ est
affiché. Par exemple, si la variable B<${Description}> est positionnée sur
S<« foo> est bar.${Newline}foo est S<super. »> et si vous avez le champ S<suivant :>

 Description: foo application
  ${Description}
  .
  More text.

Le résultat final S<sera :>

 Description: foo application
  foo is bar.
  foo is great.
  .
  More text.

On peut définir les variables en utilisant l'option commune B<-V>. On peut
aussi se servir du fichier B<debian/substvars> (ou tout autre fichier avec
l'option B<-T>). Ce fichier est composé de lignes de la forme S<suivante :>
I<nom>B<=>I<valeur>. Les espaces résiduelles sur chaque ligne, les lignes
vides et les lignes qui commencent par un symbole B<#> sont ignorées.

En outre, les variables standard suivantes sont S<disponibles :>

=over 

=item B<Arch>

L'architecture de l'hôte actuel (c'est-à-dire l'architecture pour laquelle
le paquet est construit, équivalent de B<DEB_HOST_ARCH>).

=item B<vendor:Name>

The current vendor name (since dpkg 1.20.0).  This value comes from the
B<Vendor> field for the current vendor's origin file, as B<dpkg-vendor>(1)
would retrieve it.

=item B<vendor:Id>

The current vendor ID (since dpkg 1.20.0).  This is just the lowercase
variant of B<vendor:Name>.

=item B<source:Version>

Version du paquet source (depuis S<dpkg 1.13.19).>

=item B<source:Upstream-Version>

La version amont du paquet source, avec éventuellement S<l'« epoch »> de la
version Debian (depuis S<dpkg 1.13.19).>

=item B<binary:Version>

La version du paquet binaire (qui peut être différente de B<source:Version>
dans un binNMU par S<exemple ;> depuis S<dpkg 1.13.19).>

=item B<Source-Version>

La version du paquet source, selon le fichier changelog. Cette variable est
maintenant B<obsolète> et produit une erreur lors de son utilisation car sa
signification est distincte de sa fonction. Utilisez plutôt
B<source:Version> ou B<binary:Version>.

=item B<source:Synopsis>

Le synopsis du paquet source, extrait du champ B<Description> du paragraphe
source, s'il existe (depuis S<dpkg 1.19.0).>

=item B<source:Extended-Description>

La description étendue du paquet source, extraite du champ B<Description> du
paragraphe source, s'il existe (depuis S<dpkg 1.19.0).>

=item B<Installed-Size>

The approximate total size of the package's installed files. This value is
copied into the corresponding control file field; setting it will modify the
value of that field. If this variable is not set B<dpkg-gencontrol> will
compute the default value by accumulating the size of each regular file and
symlink rounded to 1 KiB used units, and a baseline of 1 KiB for any other
filesystem object type.  With hardlinks only being counted once as a regular
file.

S<B<Remarque> :> Il faut tenir compte que cela ne peut jamais être qu'une
approximation dans la mesure où la taille véritablement occupée sur un
système installé dépend largement du système de fichiers utilisé et de ses
paramètres, ce qui pourrait finir par l'utilisation de plus ou moins
d'espace que ce qui est spécifié dans ce champ.

=item B<Extra-Size>

L'espace disque supplémentaire utilisé pour l'installation du paquet. Quand
on fixe cette variable, on ajoute sa valeur à la valeur de la variable
B<Installed-Size> (qu'elle soit définie explicitement ou calculée par
défaut) avant qu'elle soit copiée dans le champ B<Installed-Size> du fichier
S<« control ».>

=item B<S:>I<nom-de-champ>

La valeur du champ I<nom-de-champ> du paragraphe source (qui doit être
classiquement en majuscules, depuis S<dpkg 1.18.11).> Quand on fixe ces
variables, cela ne prend effet que là où elles sont explicitement
développées. Ces variables ne sont disponibles que lors de la création des
fichiers de contrôle binaires.

=item B<F:>I<nom-de-champ>

La valeur du champ I<nom-de-champ> affichée en sortie (qui doit être
classiquement en majuscules). Quand on fixe ces variables, cela ne prend
effet que là où elles sont explicitement développées.

=item B<Format>

La version du format du fichier B<.changes> produite par la version des
scripts construisant le source. Quand on détermine cette variable, le
contenu du champ B<Format> dans le fichier B<.changes> est aussi modifié.

=item B<Newline>, B<Space>, B<Tab>

Ces variables contiennent chacune le caractère correspondant.

=item B<shlibs:>I<champ-dépendance>

Les variables déterminées de cette façon sont produites par
B<dpkg-shlibdeps>.

=item B<dpkg:Upstream-Version>

La version amont de dpkg (depuis S<dpkg 1.13.19).>

=item B<dpkg:Version>

La version complète de dpkg (depuis S<dpkg 1.13.19).>

=back

Quand une variable est référencée mais n'est pas définie, cela produit un
avertissement et une valeur vide est supposée.

=head1 FICHIERS

=over 

=item B<debian/substvars>

La liste des variables de substitution et leurs valeurs.

=back

=head1 VOIR AUSSI

B<dpkg>(1), B<dpkg-vendor>(1), B<dpkg-genchanges>(1), B<dpkg-gencontrol>(1),
B<dpkg-shlibdeps>(1), B<dpkg-source>(1).


=head1 TRADUCTION

Ariel VARDI <ariel.vardi@freesbee.fr>, 2002.
Philippe Batailler, 2006.
Nicolas François, 2006.
Veuillez signaler toute erreur à <debian-l10n-french@lists.debian.org>.
